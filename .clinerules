# Datawrapper Python Library

This is a Python library for interacting with the Datawrapper API to create and manage charts.

## Project Structure

- `datawrapper/` - Main package directory
  - `__main__.py` - Main Datawrapper API client
  - `charts/` - Chart-specific implementations
    - `base.py` - BaseChart class with common functionality
    - `models.py` - Pydantic models for API metadata structures
    - `annos.py` - Annotation models (TextAnnotation, RangeAnnotation)
    - Individual chart type files: `area.py`, `bar.py`, `column.py`, `line.py`, `multiple_column.py`, `scatter.py`, `stacked_bar.py`, `arrow.py`
- `tests/` - Test suite
  - `unit/` - Unit tests
  - `integration/` - Integration tests
  - `functional/` - Functional tests (require API token)
  - `samples/` - Sample chart JSON files for testing

## Key Patterns

### Serialization/Deserialization

The library uses a consistent pattern for converting between Python objects and Datawrapper API JSON:

1. **Serialization** (Python → API): Chart classes have a `serialize()` method that converts Python objects to the API's expected JSON format
2. **Deserialization** (API → Python): Chart classes have a `deserialize_model()` classmethod that converts API JSON responses back to Python objects

### Custom Ticks Utility

The `CustomTicks` class in `models.py` provides utilities for handling custom tick marks on chart axes:

- `CustomTicks.serialize(ticks: list[Any]) -> str`: Converts a list of tick values to a comma-separated string for the API
- `CustomTicks.deserialize(ticks_str: str) -> list[Any]`: Parses a comma-separated string from the API back to a list of tick values
  - Automatically converts numeric strings to numbers (int or float)
  - Preserves non-numeric strings as-is (e.g., date strings like "2020-01-01")

This utility is used by AreaChart, ColumnChart, LineChart, and MultipleColumnChart to handle the `custom-ticks-x` and `custom-ticks-y` fields.

### Color Category Utility

The `ColorCategory` class in `models.py` provides utilities for handling color category mappings:

- `ColorCategory.serialize(color_map, category_labels=None, category_order=None, exclude_from_key=None) -> dict`: Converts Python color mappings to the API's expected format with a `map` key and optional additional fields
- `ColorCategory.deserialize(color_category_obj) -> dict`: Parses the API's color category structure back to Python, returning a dictionary with keys:
  - `color_category`: The color mapping dictionary
  - `category_labels`: Optional labels for categories
  - `category_order`: Optional ordering for categories
  - `exclude_from_color_key`: Optional list of categories to exclude from the legend

This utility is used by AreaChart, BarChart, ColumnChart, LineChart, MultipleColumnChart, StackedBarChart, and ArrowChart to handle the `color-category` field in the visualize metadata.

### Annotations

Charts support two types of annotations:
- `TextAnnotation`: Text labels at specific coordinates
- `RangeAnnotation`: Highlighted ranges with optional labels

Both annotation classes have:
- `serialize()` method: Converts a single annotation instance to API format
- `deserialize_model()` classmethod: Converts API JSON (list of annotation dicts) back to Python list of dicts

The BaseChart class provides `_serialize_annotations()` helper method to handle lists of annotations during serialization.

Chart classes use the annotation class methods directly:
- For serialization: `self._serialize_annotations(self.text_annotations, TextAnnotation)`
- For deserialization: `TextAnnotation.deserialize_model(visualize.get("text-annotations"))`

This pattern is used by AreaChart, BarChart, ColumnChart, LineChart, MultipleColumnChart, and ScatterPlot.

## Testing

- Run all tests: `uv run python -m pytest tests/`
- Run unit tests only: `uv run python -m pytest tests/unit/`
- Run integration tests: `uv run python -m pytest tests/integration/`
- Functional tests require `DATAWRAPPER_ACCESS_TOKEN` environment variable

## Recent Changes

### Annotation Serialization Fix (2025-01-13)

Fixed the annotation serialization to match the Datawrapper API's expected format:

- Updated `BaseChart._serialize_annotations()` to return a list of annotation dictionaries instead of a dictionary
- The API expects annotations in the format: `[{annotation1}, {annotation2}, ...]`
- Updated integration tests to verify the correct list format
- All 232 unit tests and 220 integration tests pass

### Export Test Mocking (2025-01-13)

Converted the export integration tests to use mocking instead of hitting the API:

- Updated `tests/integration/test_base_export.py` to mock the Datawrapper client
- Tests now run faster and are more reliable (no network dependencies)
- Removed the `DATAWRAPPER_ACCESS_TOKEN` requirement for these tests
- Tests verify that the export method correctly delegates to the client's `export_chart()` method

### BaseChart Publish Method (2025-01-13)

Added a `publish()` method to the BaseChart class that delegates to the main Datawrapper client's `publish_chart()` method:

- The `publish()` method is available on all chart instances (AreaChart, BarChart, ColumnChart, LineChart, MultipleColumnChart, ScatterPlot, StackedBarChart, ArrowChart)
- Requires that the chart has been created (has a `chart_id`)
- Automatically gets or creates a Datawrapper client using the chart's access token
- Returns the API response from publishing the chart
- All 232 unit tests and 220 integration tests pass

Usage example:
```python
chart = BarChart(title="My Chart", data=data)
chart.create()  # Creates the chart and sets chart_id
response = chart.publish()  # Publishes the chart
```

### Annotation Deserialization Refactoring (2025-01-13)

Simplified annotation deserialization by adding `deserialize_model()` classmethods to annotation classes:

- Added `TextAnnotation.deserialize_model()` and `RangeAnnotation.deserialize_model()` classmethods in `annos.py`
- These methods handle converting API JSON (list of annotation dicts or None) to Python list of dicts
- Removed the `_deserialize_annotations()` helper method from BaseChart
- Updated AreaChart, BarChart, ColumnChart, LineChart, MultipleColumnChart, and ScatterPlot to call annotation class methods directly
- All 220 existing integration tests continue to pass

This change creates symmetry between serialization and deserialization:
- Serialization: Chart calls `self._serialize_annotations(annotations, AnnotationClass)`
- Deserialization: Chart calls `AnnotationClass.deserialize_model(api_data)`

The annotation classes now fully own their own serialization/deserialization logic.

### Color Category Refactoring (2025-01-13)

Refactored the color category handling to eliminate code duplication:

- Created `ColorCategory` utility class in `models.py` with `serialize()` and `deserialize()` static methods
- Updated AreaChart, BarChart, ColumnChart, LineChart, MultipleColumnChart, StackedBarChart, and ArrowChart to use the new utility
- Removed duplicate color category serialization/deserialization logic from individual chart classes
- Added comprehensive unit tests in `tests/unit/models/test_color_category.py`
- All 220 existing integration tests continue to pass

The `ColorCategory` utility handles both simple color mappings and complex structures with category labels, ordering, and exclusions from the legend.

### Custom Ticks Refactoring (2025-01-13)

Refactored the custom tick marks handling to eliminate code duplication:

- Created `CustomTicks` utility class in `models.py` with `serialize()` and `deserialize()` static methods
- Updated AreaChart, ColumnChart, LineChart, and MultipleColumnChart to use the new utility
- Removed duplicate tick parsing logic from individual chart classes
- Added comprehensive unit tests in `tests/unit/models/test_custom_ticks.py`
- All existing integration tests continue to pass

The `CustomTicks.deserialize()` method intelligently handles mixed data types:
- Converts numeric strings to int or float
- Preserves non-numeric strings (like dates) as-is
- Handles empty strings and whitespace
