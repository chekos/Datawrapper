name: Continuous deployment

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  DATAWRAPPER_ACCESS_TOKEN: ${{ secrets.DATAWRAPPER_ACCESS_TOKEN }}

jobs:
  lint-python:
    name: Lint Python code
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v5

      - id: check-ruff
        name: Check with Ruff
        uses: astral-sh/ruff-action@v3
        with:
          args: 'check --exit-zero --verbose'
          src: './datawrapper'

      - id: format-ruff
        name: Format with Ruff
        uses: astral-sh/ruff-action@v3
        with:
          args: 'format --check --verbose'
          src: './datawrapper'

  mypy-python:
    name: Check Python static typing
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v5

      - id: install-uv
        name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - id: install-python
        name: Install Python
        run: uv python install 3.13

      - id: install-python-dependencies
        name: Install Python dependencies
        run: uv sync --extra mypy

      - id: mypy
        name: Run mypy
        run: uv run mypy ./ --ignore-missing-imports

  test-python:
    name: Test Python code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.10', '3.11', '3.12', '3.13']
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - id: install-uv
        name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - id: install-python
        name: Install Python
        run: uv python install ${{ matrix.python }}

      - id: install-python-dependencies
        name: Install Python dependencies
        run: uv sync --extra test --python ${{ matrix.python }}
        shell: bash

      - id: tests
        name: Run tests
        run: uv run pytest --cov -sv
        shell: bash

  build:
    name: Build release candidate
    runs-on: ubuntu-latest
    needs: [test-python]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - id: install-uv
        name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - id: install-python
        name: Install Python
        run: uv python install 3.13

      - id: build
        name: Build releases
        run: uv build --sdist --wheel
        shell: bash

      - id: save
        name: Save artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-candidate
          path: ./dist
          if-no-files-found: error

  release:
    name: PyPI release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - id: fetch
        name: Fetch artifact
        uses: actions/download-artifact@v3
        with:
          name: release-candidate
          path: ./dist

      - id: publish
        name: Publish release
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          verify_metadata: false
